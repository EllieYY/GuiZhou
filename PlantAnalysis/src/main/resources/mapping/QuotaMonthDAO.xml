<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sk.gz.dao.QuotaMonthDAO">
  <resultMap id="BaseResultMap" type="com.sk.gz.entity.QuotaMonth">
    <id column="date" jdbcType="TIMESTAMP" property="date" />
    <id column="plantId" jdbcType="INTEGER" property="plantid" />
    <result column="academicPower" jdbcType="DOUBLE" property="academicpower" />
    <result column="actualPower" jdbcType="DOUBLE" property="actualpower" />
    <result column="downtimeReduction" jdbcType="DOUBLE" property="downtimereduction" />
    <result column="limitReduction" jdbcType="DOUBLE" property="limitreduction" />
    <result column="otherReduction" jdbcType="DOUBLE" property="otherreduction" />
    <result column="downtime" jdbcType="BIGINT" property="downtime" />
    <result column="validDays" jdbcType="INTEGER" property="validdays" />
    <result column="avgWindSpeed" jdbcType="REAL" property="avgwindspeed" />
  </resultMap>
  <sql id="Base_Column_List">
    `date`, plantId, academicPower, actualPower, downtimeReduction, limitReduction, otherReduction, 
    downtime, validDays, avgWindSpeed
  </sql>
  <select id="selectByPrimaryKey" parameterType="com.sk.gz.entity.QuotaMonthKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from quota_month
    where `date` = #{date,jdbcType=TIMESTAMP}
      and plantId = #{plantid,jdbcType=INTEGER}
  </select>
  <select id="findPowerIndicators" resultType="com.sk.gz.model.power.PowerIndicators">
    SELECT
      b.name AS name,
      sum(a.actualPower) as actualPower,
      sum(a.academicPower) as academicPower,
      sum(a.academicPower) - sum(a.actualPower) as totalReduction,
      sum(a.downtimeReduction) as downtimeReduction ,
      sum(a.limitReduction) as limitReduction,
      sum(a.otherReduction) as unknownReduction,
      CONVERT((sum(a.validDays)*24*3600-sum(a.downtime))/(sum(a.validDays)*24*3600), DECIMAL(10, 2)) as tba,
      CONVERT(sum(a.actualPower)/sum(a.academicPower), DECIMAL(10, 2)) as pba
    FROM
      quota_month a,
      plant b
    WHERE
      a.plantId = b.id
    GROUP BY a.plantId, b.name
  </select>
  <select id="findActualPowerByPlantId" resultType="com.sk.gz.model.power.MonthPower">
    SELECT
      a.date AS month,
      a.actualPower AS power
    FROM
      quota_month a
    WHERE
      a.plantId = #{plantId}
  </select>
  <select id="findTBA" resultType="com.sk.gz.model.power.Availability">
    SELECT
      b.name AS name,
      CONVERT((sum(a.validDays)*24*3600-sum(a.downtime))/(sum(a.validDays)*24*3600), DECIMAL(10, 2)) as availability
    FROM
      quota_month a,
      plant b
    WHERE
      a.plantId = b.id
    GROUP BY a.plantId
  </select>
  <select id="findPBA" resultType="com.sk.gz.model.power.Availability">
    SELECT
      b.name AS name,
      CONVERT(sum(a.actualPower)/sum(a.academicPower), DECIMAL(10, 2)) as availability
    FROM
      quota_month a,
      plant b
    WHERE
      a.plantId = b.id
    GROUP BY a.plantId
  </select>
  <select id="findPlantPowerPreview" resultType="com.sk.gz.model.power.PlantPower">
    SELECT
      b.name AS name,
      sum(a.actualPower) as power,
      sum(a.academicPower) - sum(a.actualPower) as reduction
    FROM
      quota_month a,
      plant b
    WHERE
      a.plantId = b.id
    GROUP BY a.plantId
  </select>
  <select id="findReducations" resultType="com.sk.gz.model.power.PlantReduction">
    SELECT
      b.name AS name,
      sum(a.downtimeReduction) as downtimeReduction ,
      sum(a.limitReduction) as limitReduction,
      sum(a.otherReduction) as unknownReduction
    FROM
      quota_month a,
      plant b
    WHERE
      a.plantId = b.id
    GROUP BY a.plantId
  </select>
  <select id="findStationIndicators" resultType="com.sk.gz.model.power.StationIndicators">
    SELECT
      b.name AS name,
      b.id AS id,
      sum( a.validDays ) AS dataValidDays,
      b.powerRating AS powerRating,
      sum( a.actualPower ) AS power,
      CONVERT (
              ( sum( a.academicPower ) - sum( a.actualPower ) ) / sum( a.academicPower ),
              DECIMAL ( 10, 2 )
      ) AS reductionFactor,
      CONVERT (
              ( sum( a.actualPower ) / b.powerRating ) / ( sum( a.validDays ) * 24 ),
              DECIMAL ( 10, 2 )
      ) AS capacityFactor,
      CONVERT ( sum( a.actualPower ) / sum( a.validDays ), DECIMAL ( 10, 2 ) ) AS dailyAveragePower,
      avg( a.avgWindSpeed ) AS averageWindSpeed,
      CONVERT (
              ( sum( a.validDays ) * 24 * 3600- sum( a.downtime ) ) / ( sum( a.validDays ) * 24 * 3600 ),
              DECIMAL ( 10, 2 )
      ) AS tba,
      CONVERT ( sum( a.actualPower ) / sum( a.academicPower ), DECIMAL ( 10, 2 ) ) AS pba
    FROM
      quota_month a,
      plant b
    WHERE
      a.plantId = b.id
    GROUP BY
      a.plantId,
      b.name
  </select>
  <select id="findStationMonthPower" resultType="com.sk.gz.model.power.MonthStationPower">
    SELECT
      date AS time,
      sum( actualPower ) AS power,
      sum( academicPower ) - sum( actualPower ) AS reduction
    FROM
      quota_month
    GROUP BY
      date
  </select>
  <select id="findStationPreview" resultType="com.sk.gz.model.power.StationPreview">
    SELECT
      s.name AS name,
      sum( a.validDays ) AS dataValidDays,
      min( a.date ) as startTime,
      now() as endTime,
      sum( a.actualPower ) AS power,
      sum( a.academicPower ) - sum( a.actualPower ) AS reduction,
      CONVERT (
              ( sum( a.academicPower ) - sum( a.actualPower ) ) / sum( a.academicPower ),
              DECIMAL ( 10, 2 )
      ) AS reductionRatio,
      avg( a.avgWindSpeed ) AS averageWindSpeed,
      CONVERT (
              ( sum( a.validDays ) * 24 * 3600- sum( a.downtime ) ) / ( sum( a.validDays ) * 24 * 3600 ),
              DECIMAL ( 10, 2 )
      ) AS tba,
      CONVERT ( sum( a.actualPower ) / sum( a.academicPower ), DECIMAL ( 10, 2 ) ) AS pba
    FROM
      quota_month a,
      plant b,
      station s
    WHERE
      a.plantId = b.id
      and b.stationId = s.id
    GROUP BY
      s.id
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.sk.gz.entity.QuotaMonthKey">
    delete from quota_month
    where `date` = #{date,jdbcType=TIMESTAMP}
      and plantId = #{plantid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteMonthStatistic">
    delete from quota_month
    where
      `date` = #{monthBegin,jdbcType=TIMESTAMP}
  </delete>
  <insert id="insert" parameterType="com.sk.gz.entity.QuotaMonth">
    insert into quota_month (`date`, plantId, academicPower, 
      actualPower, downtimeReduction, limitReduction, 
      otherReduction, downtime, validDays, 
      avgWindSpeed)
    values (#{date,jdbcType=TIMESTAMP}, #{plantid,jdbcType=INTEGER}, #{academicpower,jdbcType=DOUBLE}, 
      #{actualpower,jdbcType=DOUBLE}, #{downtimereduction,jdbcType=DOUBLE}, #{limitreduction,jdbcType=DOUBLE}, 
      #{otherreduction,jdbcType=DOUBLE}, #{downtime,jdbcType=BIGINT}, #{validdays,jdbcType=INTEGER}, 
      #{avgwindspeed,jdbcType=REAL})
  </insert>
  <insert id="insertSelective" parameterType="com.sk.gz.entity.QuotaMonth">
    insert into quota_month
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="date != null">
        `date`,
      </if>
      <if test="plantid != null">
        plantId,
      </if>
      <if test="academicpower != null">
        academicPower,
      </if>
      <if test="actualpower != null">
        actualPower,
      </if>
      <if test="downtimereduction != null">
        downtimeReduction,
      </if>
      <if test="limitreduction != null">
        limitReduction,
      </if>
      <if test="otherreduction != null">
        otherReduction,
      </if>
      <if test="downtime != null">
        downtime,
      </if>
      <if test="validdays != null">
        validDays,
      </if>
      <if test="avgwindspeed != null">
        avgWindSpeed,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="date != null">
        #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="plantid != null">
        #{plantid,jdbcType=INTEGER},
      </if>
      <if test="academicpower != null">
        #{academicpower,jdbcType=DOUBLE},
      </if>
      <if test="actualpower != null">
        #{actualpower,jdbcType=DOUBLE},
      </if>
      <if test="downtimereduction != null">
        #{downtimereduction,jdbcType=DOUBLE},
      </if>
      <if test="limitreduction != null">
        #{limitreduction,jdbcType=DOUBLE},
      </if>
      <if test="otherreduction != null">
        #{otherreduction,jdbcType=DOUBLE},
      </if>
      <if test="downtime != null">
        #{downtime,jdbcType=BIGINT},
      </if>
      <if test="validdays != null">
        #{validdays,jdbcType=INTEGER},
      </if>
      <if test="avgwindspeed != null">
        #{avgwindspeed,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sk.gz.entity.QuotaMonth">
    update quota_month
    <set>
      <if test="academicpower != null">
        academicPower = #{academicpower,jdbcType=DOUBLE},
      </if>
      <if test="actualpower != null">
        actualPower = #{actualpower,jdbcType=DOUBLE},
      </if>
      <if test="downtimereduction != null">
        downtimeReduction = #{downtimereduction,jdbcType=DOUBLE},
      </if>
      <if test="limitreduction != null">
        limitReduction = #{limitreduction,jdbcType=DOUBLE},
      </if>
      <if test="otherreduction != null">
        otherReduction = #{otherreduction,jdbcType=DOUBLE},
      </if>
      <if test="downtime != null">
        downtime = #{downtime,jdbcType=BIGINT},
      </if>
      <if test="validdays != null">
        validDays = #{validdays,jdbcType=INTEGER},
      </if>
      <if test="avgwindspeed != null">
        avgWindSpeed = #{avgwindspeed,jdbcType=REAL},
      </if>
    </set>
    where `date` = #{date,jdbcType=TIMESTAMP}
      and plantId = #{plantid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sk.gz.entity.QuotaMonth">
    update quota_month
    set academicPower = #{academicpower,jdbcType=DOUBLE},
      actualPower = #{actualpower,jdbcType=DOUBLE},
      downtimeReduction = #{downtimereduction,jdbcType=DOUBLE},
      limitReduction = #{limitreduction,jdbcType=DOUBLE},
      otherReduction = #{otherreduction,jdbcType=DOUBLE},
      downtime = #{downtime,jdbcType=BIGINT},
      validDays = #{validdays,jdbcType=INTEGER},
      avgWindSpeed = #{avgwindspeed,jdbcType=REAL}
    where `date` = #{date,jdbcType=TIMESTAMP}
      and plantId = #{plantid,jdbcType=INTEGER}
  </update>
</mapper>