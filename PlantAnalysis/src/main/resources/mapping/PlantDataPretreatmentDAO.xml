<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sk.gz.dao.PlantDataPretreatmentDAO">
  <resultMap id="BaseResultMap" type="com.sk.gz.entity.PlantDataPretreatment">
    <id column="time" jdbcType="TIMESTAMP" property="time" />
    <id column="plantId" jdbcType="INTEGER" property="plantid" />
    <result column="duration" jdbcType="BIGINT" property="duration" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="powerState" jdbcType="INTEGER" property="powerstate" />
    <result column="estimatePower" jdbcType="REAL" property="estimatepower" />
    <result column="reductivePower" jdbcType="REAL" property="reductivepower" />
    <result column="actualPower" jdbcType="REAL" property="actualpower" />
    <result column="ambWindSpeed" jdbcType="REAL" property="ambwindspeed" />
    <result column="griPower" jdbcType="REAL" property="gripower" />
    <result column="genRPM" jdbcType="REAL" property="genrpm" />
    <result column="ambWindDir" jdbcType="REAL" property="ambwinddir" />
    <result column="bladeAngle" jdbcType="REAL" property="bladeangle" />
  </resultMap>
  <sql id="Base_Column_List">
    `time`, plantId, duration, `state`, powerState, estimatePower, reductivePower, actualPower, 
    ambWindSpeed, griPower, genRPM, ambWindDir, bladeAngle
  </sql>
  <select id="selectByPrimaryKey" parameterType="com.sk.gz.entity.PlantDataPretreatmentKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from plant_data_pretreatment
    where `time` = #{time,jdbcType=TIMESTAMP}
      and plantId = #{plantid,jdbcType=INTEGER}
  </select>
  <select id="findMaxByColumn" resultType="java.lang.Float">
    SELECT max(${column})
    FROM plant_data_pretreatment
      WHERE plantId = #{plantId,jdbcType=INTEGER}
  </select>
  <select id="findByColumnAndRange" parameterType="com.sk.gz.model.converter.RangeParam" resultType="java.lang.Float">
      SELECT ${targetColumn}
        FROM plant_data_pretreatment
        WHERE plantId = #{plantId,jdbcType=INTEGER}
          and `state` = #{validState}
          and ${filterColumn} &gt;= #{valueMin}
          and ${filterColumn} &lt; #{valueMax}
        Order by ${targetColumn} ASC
  </select>
    <select id="findAvgByColumnAndRange" parameterType="com.sk.gz.model.converter.RangeParam" resultType="com.sk.gz.model.curve.CurvePoint">
        SELECT
            avg(${targetColumn}) as "power",
            avg(${filterColumn}) as "windSpeed"
        FROM plant_data_pretreatment
        WHERE plantId = #{plantId,jdbcType=INTEGER}
              and `state` = #{validState}
              and ${filterColumn} &gt;= #{valueMin}
              and ${filterColumn} &lt; #{valueMax}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="com.sk.gz.entity.PlantDataPretreatmentKey">
    delete from plant_data_pretreatment
    where `time` = #{time,jdbcType=TIMESTAMP}
      and plantId = #{plantid,jdbcType=INTEGER}
    </delete>
  <insert id="insert" parameterType="com.sk.gz.entity.PlantDataPretreatment">
    insert into plant_data_pretreatment (`time`, plantId, duration, 
      `state`, powerState, estimatePower, 
      reductivePower, actualPower, ambWindSpeed, 
      griPower, genRPM, ambWindDir, 
      bladeAngle)
    values (#{time,jdbcType=TIMESTAMP}, #{plantid,jdbcType=INTEGER}, #{duration,jdbcType=BIGINT}, 
      #{state,jdbcType=INTEGER}, #{powerstate,jdbcType=INTEGER}, #{estimatepower,jdbcType=REAL}, 
      #{reductivepower,jdbcType=REAL}, #{actualpower,jdbcType=REAL}, #{ambwindspeed,jdbcType=REAL}, 
      #{gripower,jdbcType=REAL}, #{genrpm,jdbcType=REAL}, #{ambwinddir,jdbcType=REAL}, 
      #{bladeangle,jdbcType=REAL})
  </insert>
  <insert id="insertSelective" parameterType="com.sk.gz.entity.PlantDataPretreatment">
    insert into plant_data_pretreatment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="time != null">
        `time`,
      </if>
      <if test="plantid != null">
        plantId,
      </if>
      <if test="duration != null">
        duration,
      </if>
      <if test="state != null">
        `state`,
      </if>
      <if test="powerstate != null">
        powerState,
      </if>
      <if test="estimatepower != null">
        estimatePower,
      </if>
      <if test="reductivepower != null">
        reductivePower,
      </if>
      <if test="actualpower != null">
        actualPower,
      </if>
      <if test="ambwindspeed != null">
        ambWindSpeed,
      </if>
      <if test="gripower != null">
        griPower,
      </if>
      <if test="genrpm != null">
        genRPM,
      </if>
      <if test="ambwinddir != null">
        ambWindDir,
      </if>
      <if test="bladeangle != null">
        bladeAngle,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="plantid != null">
        #{plantid,jdbcType=INTEGER},
      </if>
      <if test="duration != null">
        #{duration,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="powerstate != null">
        #{powerstate,jdbcType=INTEGER},
      </if>
      <if test="estimatepower != null">
        #{estimatepower,jdbcType=REAL},
      </if>
      <if test="reductivepower != null">
        #{reductivepower,jdbcType=REAL},
      </if>
      <if test="actualpower != null">
        #{actualpower,jdbcType=REAL},
      </if>
      <if test="ambwindspeed != null">
        #{ambwindspeed,jdbcType=REAL},
      </if>
      <if test="gripower != null">
        #{gripower,jdbcType=REAL},
      </if>
      <if test="genrpm != null">
        #{genrpm,jdbcType=REAL},
      </if>
      <if test="ambwinddir != null">
        #{ambwinddir,jdbcType=REAL},
      </if>
      <if test="bladeangle != null">
        #{bladeangle,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="false">
    insert into plant_data_pretreatment (`time`, plantId, duration,
    `state`, powerState, estimatePower,
    reductivePower, actualPower, ambWindSpeed,
    griPower, genRPM, ambWindDir,
    bladeAngle)
    values

    <foreach collection="list" item="item" separator=",">
      (
        #{item.time,jdbcType=TIMESTAMP},
        #{item.plantid,jdbcType=INTEGER},
        #{item.duration,jdbcType=BIGINT},
        #{item.state,jdbcType=TINYINT},
        #{item.powerstate,jdbcType=TINYINT},
        #{item.estimatepower,jdbcType=REAL},
        #{item.reductivepower,jdbcType=REAL},
        #{item.actualpower,jdbcType=REAL},
        #{item.ambwindspeed,jdbcType=REAL},
        #{item.gripower,jdbcType=REAL},
        #{item.genrpm,jdbcType=REAL},
        #{item.ambwinddir,jdbcType=REAL},
        #{item.bladeangle,jdbcType=REAL}
      )
    </foreach>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sk.gz.entity.PlantDataPretreatment">
    update plant_data_pretreatment
    <set>
      <if test="duration != null">
        duration = #{duration,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        `state` = #{state,jdbcType=INTEGER},
      </if>
      <if test="powerstate != null">
        powerState = #{powerstate,jdbcType=INTEGER},
      </if>
      <if test="estimatepower != null">
        estimatePower = #{estimatepower,jdbcType=REAL},
      </if>
      <if test="reductivepower != null">
        reductivePower = #{reductivepower,jdbcType=REAL},
      </if>
      <if test="actualpower != null">
        actualPower = #{actualpower,jdbcType=REAL},
      </if>
      <if test="ambwindspeed != null">
        ambWindSpeed = #{ambwindspeed,jdbcType=REAL},
      </if>
      <if test="gripower != null">
        griPower = #{gripower,jdbcType=REAL},
      </if>
      <if test="genrpm != null">
        genRPM = #{genrpm,jdbcType=REAL},
      </if>
      <if test="ambwinddir != null">
        ambWindDir = #{ambwinddir,jdbcType=REAL},
      </if>
      <if test="bladeangle != null">
        bladeAngle = #{bladeangle,jdbcType=REAL},
      </if>
    </set>
    where `time` = #{time,jdbcType=TIMESTAMP}
      and plantId = #{plantid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sk.gz.entity.PlantDataPretreatment">
    update plant_data_pretreatment
    set duration = #{duration,jdbcType=BIGINT},
      `state` = #{state,jdbcType=INTEGER},
      powerState = #{powerstate,jdbcType=INTEGER},
      estimatePower = #{estimatepower,jdbcType=REAL},
      reductivePower = #{reductivepower,jdbcType=REAL},
      actualPower = #{actualpower,jdbcType=REAL},
      ambWindSpeed = #{ambwindspeed,jdbcType=REAL},
      griPower = #{gripower,jdbcType=REAL},
      genRPM = #{genrpm,jdbcType=REAL},
      ambWindDir = #{ambwinddir,jdbcType=REAL},
      bladeAngle = #{bladeangle,jdbcType=REAL}
    where `time` = #{time,jdbcType=TIMESTAMP}
      and plantId = #{plantid,jdbcType=INTEGER}
  </update>
  <update id="updateStateByRange" parameterType="com.sk.gz.model.converter.RangeParam">
    update plant_data_pretreatment
    set `state` = (case when ${targetColumn} &lt; #{rangeMin} then #{minState}
                   when ${targetColumn} &gt; #{rangeMax} then #{maxState}
                   else #{validState} end)
    where plantId = #{plantId}
      and `state` = #{validState}
      and ${filterColumn} &gt;= #{valueMin}
      and ${filterColumn} &lt; #{valueMax}
  </update>

</mapper>