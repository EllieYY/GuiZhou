<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sk.gz.dao.PlantDataPretreatmentDAO">
  <resultMap id="BaseResultMap" type="com.sk.gz.entity.PlantDataPretreatment">
    <id column="time" jdbcType="TIMESTAMP" property="time" />
    <id column="plantId" jdbcType="INTEGER" property="plantid" />
    <result column="duration" jdbcType="BIGINT" property="duration" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="powerState" jdbcType="INTEGER" property="powerstate" />
    <result column="estimatePower" jdbcType="REAL" property="estimatepower" />
    <result column="reductivePower" jdbcType="REAL" property="reductivepower" />
    <result column="actualPower" jdbcType="REAL" property="actualpower" />
    <result column="ambWindSpeed" jdbcType="REAL" property="ambwindspeed" />
    <result column="griPower" jdbcType="REAL" property="gripower" />
    <result column="genRPM" jdbcType="REAL" property="genrpm" />
    <result column="ambWindDir" jdbcType="REAL" property="ambwinddir" />
    <result column="bladeAngle" jdbcType="REAL" property="bladeangle" />
    <result column="totalPower" jdbcType="DOUBLE" property="totalpower" />
  </resultMap>
  <sql id="Base_Column_List">
    `time`, plantId, duration, `state`, powerState, estimatePower, reductivePower, actualPower, 
    ambWindSpeed, griPower, genRPM, ambWindDir, bladeAngle, totalPower
  </sql>
  <select id="selectByPrimaryKey" parameterType="com.sk.gz.entity.PlantDataPretreatmentKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from plant_data_pretreatment
    where `time` = #{time,jdbcType=TIMESTAMP}
      and plantId = #{plantid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.sk.gz.entity.PlantDataPretreatmentKey">
    delete from plant_data_pretreatment
    where `time` = #{time,jdbcType=TIMESTAMP}
      and plantId = #{plantid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.sk.gz.entity.PlantDataPretreatment">
    insert into plant_data_pretreatment (`time`, plantId, duration, 
      `state`, powerState, estimatePower, 
      reductivePower, actualPower, ambWindSpeed, 
      griPower, genRPM, ambWindDir, 
      bladeAngle, totalPower)
    values (#{time,jdbcType=TIMESTAMP}, #{plantid,jdbcType=INTEGER}, #{duration,jdbcType=BIGINT}, 
      #{state,jdbcType=INTEGER}, #{powerstate,jdbcType=INTEGER}, #{estimatepower,jdbcType=REAL}, 
      #{reductivepower,jdbcType=REAL}, #{actualpower,jdbcType=REAL}, #{ambwindspeed,jdbcType=REAL}, 
      #{gripower,jdbcType=REAL}, #{genrpm,jdbcType=REAL}, #{ambwinddir,jdbcType=REAL}, 
      #{bladeangle,jdbcType=REAL}, #{totalpower,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="com.sk.gz.entity.PlantDataPretreatment">
    insert into plant_data_pretreatment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="time != null">
        `time`,
      </if>
      <if test="plantid != null">
        plantId,
      </if>
      <if test="duration != null">
        duration,
      </if>
      <if test="state != null">
        `state`,
      </if>
      <if test="powerstate != null">
        powerState,
      </if>
      <if test="estimatepower != null">
        estimatePower,
      </if>
      <if test="reductivepower != null">
        reductivePower,
      </if>
      <if test="actualpower != null">
        actualPower,
      </if>
      <if test="ambwindspeed != null">
        ambWindSpeed,
      </if>
      <if test="gripower != null">
        griPower,
      </if>
      <if test="genrpm != null">
        genRPM,
      </if>
      <if test="ambwinddir != null">
        ambWindDir,
      </if>
      <if test="bladeangle != null">
        bladeAngle,
      </if>
      <if test="totalpower != null">
        totalPower,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="plantid != null">
        #{plantid,jdbcType=INTEGER},
      </if>
      <if test="duration != null">
        #{duration,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="powerstate != null">
        #{powerstate,jdbcType=INTEGER},
      </if>
      <if test="estimatepower != null">
        #{estimatepower,jdbcType=REAL},
      </if>
      <if test="reductivepower != null">
        #{reductivepower,jdbcType=REAL},
      </if>
      <if test="actualpower != null">
        #{actualpower,jdbcType=REAL},
      </if>
      <if test="ambwindspeed != null">
        #{ambwindspeed,jdbcType=REAL},
      </if>
      <if test="gripower != null">
        #{gripower,jdbcType=REAL},
      </if>
      <if test="genrpm != null">
        #{genrpm,jdbcType=REAL},
      </if>
      <if test="ambwinddir != null">
        #{ambwinddir,jdbcType=REAL},
      </if>
      <if test="bladeangle != null">
        #{bladeangle,jdbcType=REAL},
      </if>
      <if test="totalpower != null">
        #{totalpower,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sk.gz.entity.PlantDataPretreatment">
    update plant_data_pretreatment
    <set>
      <if test="duration != null">
        duration = #{duration,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        `state` = #{state,jdbcType=INTEGER},
      </if>
      <if test="powerstate != null">
        powerState = #{powerstate,jdbcType=INTEGER},
      </if>
      <if test="estimatepower != null">
        estimatePower = #{estimatepower,jdbcType=REAL},
      </if>
      <if test="reductivepower != null">
        reductivePower = #{reductivepower,jdbcType=REAL},
      </if>
      <if test="actualpower != null">
        actualPower = #{actualpower,jdbcType=REAL},
      </if>
      <if test="ambwindspeed != null">
        ambWindSpeed = #{ambwindspeed,jdbcType=REAL},
      </if>
      <if test="gripower != null">
        griPower = #{gripower,jdbcType=REAL},
      </if>
      <if test="genrpm != null">
        genRPM = #{genrpm,jdbcType=REAL},
      </if>
      <if test="ambwinddir != null">
        ambWindDir = #{ambwinddir,jdbcType=REAL},
      </if>
      <if test="bladeangle != null">
        bladeAngle = #{bladeangle,jdbcType=REAL},
      </if>
      <if test="totalpower != null">
        totalPower = #{totalpower,jdbcType=DOUBLE},
      </if>
    </set>
    where `time` = #{time,jdbcType=TIMESTAMP}
      and plantId = #{plantid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sk.gz.entity.PlantDataPretreatment">
    update plant_data_pretreatment
    set duration = #{duration,jdbcType=BIGINT},
      `state` = #{state,jdbcType=INTEGER},
      powerState = #{powerstate,jdbcType=INTEGER},
      estimatePower = #{estimatepower,jdbcType=REAL},
      reductivePower = #{reductivepower,jdbcType=REAL},
      actualPower = #{actualpower,jdbcType=REAL},
      ambWindSpeed = #{ambwindspeed,jdbcType=REAL},
      griPower = #{gripower,jdbcType=REAL},
      genRPM = #{genrpm,jdbcType=REAL},
      ambWindDir = #{ambwinddir,jdbcType=REAL},
      bladeAngle = #{bladeangle,jdbcType=REAL},
      totalPower = #{totalpower,jdbcType=DOUBLE}
    where `time` = #{time,jdbcType=TIMESTAMP}
      and plantId = #{plantid,jdbcType=INTEGER}
  </update>
  <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="false">
    insert into plant_data_pretreatment (`time`, plantId, duration, 
      `state`, powerState, estimatePower, 
      reductivePower, actualPower, ambWindSpeed, 
      griPower, genRPM, ambWindDir, 
      bladeAngle, totalPower)
    values

    <foreach collection="list" item="item" separator=",">
      (
      #{item.time,jdbcType=TIMESTAMP},
      #{item.plantid,jdbcType=INTEGER},
      #{item.duration,jdbcType=BIGINT},
      #{item.state,jdbcType=TINYINT},
      #{item.powerstate,jdbcType=TINYINT},
      #{item.estimatepower,jdbcType=REAL},
      #{item.reductivepower,jdbcType=REAL},
      #{item.actualpower,jdbcType=REAL},
      #{item.ambwindspeed,jdbcType=REAL},
      #{item.gripower,jdbcType=REAL},
      #{item.genrpm,jdbcType=REAL},
      #{item.ambwinddir,jdbcType=REAL},
      #{item.bladeangle,jdbcType=REAL},
	  #{item.totalpower,jdbcType=DOUBLE}
      )
    </foreach>
  </insert>
  <select id="findMaxByColumn" resultType="java.lang.Float">
    SELECT max(${column})
    FROM plant_data_pretreatment
    WHERE plantId = #{plantId,jdbcType=INTEGER}
  </select>
  <select id="findByColumnAndRange" parameterType="com.sk.gz.model.converter.RangeParam" resultType="java.lang.Float">
    SELECT ${targetColumn}
    FROM plant_data_pretreatment
    WHERE plantId = #{plantId,jdbcType=INTEGER}
    and `state` = #{validState}
    and ${filterColumn} &gt;= #{valueMin}
    and ${filterColumn} &lt; #{valueMax}
    Order by ${targetColumn} ASC
  </select>
  <select id="findAvgByColumnAndRange" parameterType="com.sk.gz.model.converter.RangeParam" resultType="com.sk.gz.model.curve.CurvePoint">
    SELECT
    avg(${targetColumn}) as "power",
    avg(${filterColumn}) as "windSpeed"
    FROM plant_data_pretreatment
    WHERE plantId = #{plantId,jdbcType=INTEGER}
    and `state` = #{validState}
    and ${filterColumn} &gt;= #{valueMin}
    and ${filterColumn} &lt; #{valueMax}
  </select>
  <update id="updateStateByRange" parameterType="com.sk.gz.model.converter.RangeParam">
    update plant_data_pretreatment
    set `state` = (case when ${targetColumn} &lt; #{rangeMin} then #{minState}
    when ${targetColumn} &gt; #{rangeMax} then #{maxState}
    else #{validState} end)
    where plantId = #{plantId}
    and `state` = #{validState}
    and ${filterColumn} &gt;= #{valueMin}
    and ${filterColumn} &lt; #{valueMax}
  </update>
  <update id="updatePower">
    UPDATE plant_data_pretreatment d
      INNER JOIN (
        SELECT
         two.plantId plantId,
         two.time time,
         two.estimatePower estimatePower,
         IF
         ( two.previous = 0, 0, two.current - two.previous ) intervalValue
         FROM
         (
           SELECT
             one.plantId,
             one.time,
             one.estimatePower,
             IF
             ( one.totalPower = 0, @one.totalPower, one.totalPower ) current,
             @one.totalPower AS previous,
             @one.totalPower := one.totalPower
           FROM
             plant_data_pretreatment one,
             ( SELECT @one.totalPower := 0 ) tmp
           WHERE
             one.state != #{invalidState}
             and
             one.time &gt;= #{sTime}
             and
             one.time &lt; #{eTime}
           ORDER BY
             one.time ASC
         ) two
        ) comb ON d.plantId = comb.plantId
               AND d.time = comb.time
    SET d.actualPower = comb.intervalValue,
      d.reductivePower = d.estimatePower - comb.intervalValue
    where d.time &gt; #{sTime} and
          d.time &lt; #{eTime}
  </update>

  <sql id="statistics_by_date">
    (SELECT
    #{monthBegin} AS date,
    plantId AS plantId,
    sum( estimatePower ) AS academicPower,
    sum( actualPower ) AS actualPower,
    sum( CASE WHEN state = #{stopState} THEN reductivePower ELSE 0 END ) AS downtimeReduction,
    sum( CASE WHEN state = #{limitState} THEN reductivePower ELSE 0 END ) AS limitReduction,
    sum( CASE WHEN state = #{underState} OR state = #{overState} THEN reductivePower ELSE 0 END ) AS otherReduction,
    sum( CASE WHEN state = #{stopState} THEN duration ELSE 0 END ) AS downtime,
    #{validDays} AS validDays,
    avg( ambWindSpeed ) AS avgWindSpeed
    FROM
    plant_data_pretreatment
    WHERE
    state != #{invalidState}
    AND time &gt;= #{filtTimeBegin}
    AND time &lt; #{filtTimeEnd}
    GROUP BY
    plantId)
  </sql>
  <update id="powerStatistic">
    <selectKey keyProperty="count" resultType="int" order="BEFORE">
      select count(*) from quota_month where date = #{monthBegin}
    </selectKey>
    <if test="count > 0">
      UPDATE quota_month
      INNER JOIN
      <include refid="statistics_by_date">
        <property name="monthBegin" value="#{monthBegin}" />
      </include>
      d ON quota_month.plantId = d.plantId
      AND quota_month.date = d.date
      SET
      quota_month.academicPower = d.academicPower,
      quota_month.actualPower = d.actualPower,
      quota_month.downtimeReduction = d.downtimeReduction,
      quota_month.limitReduction = d.limitReduction,
      quota_month.otherReduction = d.otherReduction,
      quota_month.downtime = d.downtime,
      quota_month.validDays = d.validDays,
      quota_month.avgWindSpeed = d.avgWindSpeed
    </if>
    <if test="count==0">
      INSERT INTO quota_month
      <include refid="statistics_by_date">
        <property name="monthBegin" value="#{monthBegin}" />
      </include>
    </if>

  </update>

</mapper>